name: Build and Release Sublime Package

on:
  workflow_call:
    inputs:
      deploy:
        type: boolean
        required: true
        default: false
    secrets:
      credentials_json:
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      ### Checking out our Repo
      - uses: actions/checkout@v3

      ### Setting up python
      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      ### Getting the version from the git tag or the branch name if there is none
      - name: Get the version
        shell: bash
        id: get_version
        run: echo "VERSION=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT

      ### Generating our staging version number if we are not production
      - name: Get staging version
        shell: bash
        id: staging_version
        run: echo "STAGING_VERSION=$(/bin/bash .github/scripts/staging_versioning.sh)" >> $GITHUB_OUTPUT
        if: inputs.deploy == false

      ### Setting the version in the pyproject.toml for unix builds
      - name: Set Version Bash Script
        run: |
          if [[ ${{ steps.get_version.outputs.VERSION }} =~ [0-9]+.[0-9]+.[0-9]+$ ]]
          then
                echo "This is a tagged build"
                export RELEASE_VERSION='${{ steps.get_version.outputs.VERSION }}'
                echo $RELEASE_VERSION

                # Read the current version from _version.py
                CURRENT_VERSION=$(grep -oP '(?<=__version__ = ")[^"]+' _version.py)

                # Compare the versions
                if [[ "$CURRENT_VERSION" == "$RELEASE_VERSION" ]]; then
                    echo "The version in _version.py is already set to the release version."
                else
                    echo "Update the _version.py version to $RELEASE_VERSION"
                    exit 1
                fi
          else
                echo "This is not a tagged build"
                export STAGING_VERSION='${{ steps.staging_version.outputs.STAGING_VERSION }}'
                sed -i "s/__version__ = .*/__version__ = \"${STAGING_VERSION}\"/" _version.py
          fi

      ### Compress repository contents into Pieces.sublime-package
      - name: Compress Repository
        run: |
          sudo rsync -av --iconv=utf-8 --progress ./* ./Pieces --exclude .gitignore --exclude .github --exclude .git --exclude artifacts
          sudo cp ./.python-version Pieces/.python-version
          sudo iconv -t utf-8 Pieces/.python-version
          cd Pieces
          sudo python3 ../.github/scripts/package.py Packing

      ### Writing our staging version to a file to be pulled in the last step to update our json in the cloud
      - name: Write staging version to file
        shell: bash
        run: echo "${{ steps.staging_version.outputs.STAGING_VERSION }}" > staging_version$GITHUB_RUN_NUMBER.txt
        if: ${{ inputs.deploy == false && inputs.beta == false }}

      ### Uploading our staging version text file to be pulled down later
      - uses: actions/upload-artifact@v4
        with:
          name: staging_version
          path: "*.txt"
        if: inputs.deploy == false

      - uses: actions/upload-artifact@v4
        with:
          name: output
          path: Pieces.sublime-package


  ## Pushing the built packages to GCP and GitHub
  push-build:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:

      ### Pulling down the previously built plugins
      - uses: actions/download-artifact@v4
        with:
          name: output

      ### Pulling down the staging version number to pass to gcp and GitHub releases
      - uses: actions/download-artifact@v4
        with:
          name: staging_version
        if: inputs.deploy == false

      ### What is in here??
      - name: List
        run: ls -la

      ### Authenticating with gcloud
      - name: Authenticate with Google cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.credentials_json }}
          project_id: ${{ inputs.project_id }}
          create_credentials_file: true

      ### Setting up gcloud cli
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      ### Verifying that we are good to go with gcloud
      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      ### Getting either the git tag or branch name to be set in the json
      - name: Get the version
        id: get_version
        run: echo "VERSION=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT

      ### Installing some machine deps
      - name: Install Dependencies
        run: sudo apt-get install jq -y

      ### This big, long if statement handles pushing the builds to the correct location, as well as setting the proper
      ### build info for the json files read by the server
      - name: Upload Artifacts
        run: |
          GITHUB_RUN_NUMBER+="gha"
          if [[ ${{ steps.get_version.outputs.VERSION }} =~ [0-9]+.[0-9]+.[0-9]+ ]]; then
              echo "Git Tag Versioning"
              export CHANNEL=production
              export VERSION=${{ steps.get_version.outputs.VERSION }}
              export BUCKET=app-releases-production
              export production_json="$(curl https://storage.googleapis.com/app-releases-production/plugin_sublime/production/latest.json -H "Accept: application/json")"
              export reversed_production_json=$(echo $production_json | jq 'reverse')
              export updated_production_json=$(echo $reversed_production_json | jq --arg number "$GITHUB_RUN_NUMBER" --arg channel "$CHANNEL" --arg branch "${{ steps.get_version.outputs.VERSION }}" --arg tag "$VERSION" --arg sha1 "${{ github.sha }}" '.[length] |= . + {channel: $channel, number: $number, branch: $branch, tag: $tag, sha1: $sha1}')
              echo $updated_production_json | jq 'reverse' > latest.json
              jq -n --arg number "$GITHUB_RUN_NUMBER" --arg channel "$CHANNEL" --arg branch "${{ steps.get_version.outputs.VERSION }}" --arg tag "$VERSION" --arg sha1 "${{ github.sha }}" '{channel: $channel, number: $number, branch: $branch, tag: $tag, sha1: $sha1}' > latest-single.json
          else
              echo "Staging Versioning"
              export CHANNEL=staging
              export VERSION=$(echo "$(set -- ./*.txt; echo "$1")" | xargs head -n 1)
              export BUCKET=app-releases-staging
              export staging_json="$(curl https://storage.googleapis.com/app-releases-staging/plugin_sublime/staging/latest.json -H "Accept: application/json")"
              export reversed_staging_json=$(echo $staging_json | jq 'reverse')
              export updated_staging_json=$(echo $reversed_staging_json | jq --arg number "$GITHUB_RUN_NUMBER" --arg channel "$CHANNEL" --arg branch "${{ steps.get_version.outputs.VERSION }}" --arg tag "$VERSION" --arg sha1 "${{ github.sha }}" '.[length] |= . + {channel: $channel, number: $number, branch: $branch, tag: $tag, sha1: $sha1}')
              echo $updated_staging_json | jq 'reverse' > latest.json
              jq -n --arg number "$GITHUB_RUN_NUMBER" --arg channel "$CHANNEL" --arg branch "${{ steps.get_version.outputs.VERSION }}" --arg tag "$VERSION" --arg sha1 "${{ github.sha }}" '{channel: $channel, number: $number, branch: $branch, tag: $tag, sha1: $sha1}' > latest-single.json
          fi
          gsutil -h "Cache-Control: max-age=0" cp Pieces.sublime-package gs://$BUCKET/plugin_sublime/$GITHUB_RUN_NUMBER/Pieces.sublime-package
          gsutil -h "Cache-Control: max-age=0" cp latest-single.json gs://$BUCKET/plugin_sublime/$CHANNEL/latest-single.json
          gsutil -h "Cache-Control: max-age=0" cp latest.json gs://$BUCKET/plugin_sublime/$CHANNEL/latest.json
          echo "releasetag=$VERSION" >> $GITHUB_ENV

      ### Upload to GitHub releases pre-release
      - name: Release to GitHub Releases
        uses: softprops/action-gh-release@v1
        if: inputs.deploy == false
        with:
          files: Pieces.sublime-package
          fail_on_unmatched_files: true
          name: ${{ env.releasetag }}
          tag_name: ${{ env.releasetag }}
          generate_release_notes: true
          prerelease: true

      ### Upload to GitHub releases
      - name: Release to GitHub Releases
        uses: softprops/action-gh-release@v1
        if: inputs.deploy == true
        with:
          files: Pieces.sublime-package
          fail_on_unmatched_files: true
          name: ${{ env.releasetag }}
          tag_name: ${{ env.releasetag }}
          generate_release_notes: true
          prerelease: false
